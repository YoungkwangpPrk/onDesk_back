<?xml version="1.0" encoding="UTF-8"?>
<!-- 30초마다 설정 파일의 변경을 확인 하여 변경시 갱신 -->
<configuration scan="true" scanPeriod="30 seconds">

<!--    &lt;!&ndash;  Property  사용하고자 하는 변수명 선언&ndash;&gt;-->
<!--    <property name="MAX_HISTORY" value="30" />-->
<!--    <property name="MAX_FILE_SIZE" value="10MB" />-->
<!--    <property name="FILE_PATTERN" value="[%d{yyyy-MM-dd HH:mm:ss}:%-3relative][%thread] %-5level %logger{35} - %msg%n" />-->
<!--    <property name="SLACK_PATTERN"-->
<!--              value="[%d{yyyy-MM-dd:HH:mm:ss}:%-3relative][%thread] %-5level %logger{35} - %msg%n" />-->

    <!-- 로그 파일이 저장될 경로 -->
    <property name="LOG_PATH" value="./Web/ITSM/logs"/>

    <!-- 로그 파일 이름 -->
    <property name="LOG_FILE_NAME" value="itsmLog"/>

    <!-- 로그 출력 패턴 -->
    <property name="LOG_PATTERN" value="[%d{yyyy-MM-dd HH:mm:ss}:%-3relative][%thread] %-5level %logger{35} - %msg%n" />

    <!-- 로그 레벨 -->
    <!--
    	1) ERROR : 오류 메시지 표시
        2) WARN  : 경고성 메시지 표시
        3) INFO  : 정보성 메시지 표시
        4) DEBUG : 디버깅하기 위한 메시지 표시
        5) TRACE :  Debug보다 훨씬 상세한 메시지 표시

        아래에서는 info로 설정하였는데, 이 경우엔 INFO 보다 위에 있는 DEBUG와 TRACE는 표시하지 않는다.
    -->
    <property name="LOG_LEVEL" value="info"/>

    <!-- CONSOLE에 로그 출력 세팅 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <layout class="ch.qos.logback.classic.PatternLayout">
            <Pattern>
                [%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} : %30logger{5} - %msg%n
            </Pattern>
        </layout>
    </appender>

    <!-- File에 로그 출력 세팅 -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 파일 경로 설정 -->
        <file>${LOG_PATH}/${LOG_FILE_NAME}.log</file>

        <!-- 출력패턴 설정-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <charset>UTF-8</charset>
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>

        <!-- Rolling 정책 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- .gz,.zip 등을 넣으면 자동 일자별 로그파일 압축 -->
            <fileNamePattern>${LOG_PATH}/${LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 파일당 최고 용량 kb, mb, gb -->
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거-->
            <maxHistory>30</maxHistory>
            <!--<MinIndex>1</MinIndex>
            <MaxIndex>10</MaxIndex>-->
        </rollingPolicy>
    </appender>

    <!-- 로그 전역 세팅 -->
    <root level="${LOG_LEVEL}">
        <!-- 위에 설정한 콘솔 설정 추가 -->
        <appender-ref ref="CONSOLE"/>

        <!-- 위에 설정한 파일 설정 추가 -->
        <appender-ref ref="FILE"/>
    </root>

    <!-- 1. log4jdbc 옵션 설정 -->
    <!-- <logger name="jdbc" level="OFF" />-->

    <!-- 2. 커넥션 open close 이벤트를 로그로 남긴다 -->
    <logger name="jdbc.connection" level="OFF" />

    <!-- 3.  SQL문 만을 로그로 남기며, PreparedStatement 일 경우 관련된 argument값으로 대체된 SQL문이 보여진다.-->
    <logger name="jdbc.sqlonly" leber="OFF" />

    <!-- 4. SQL문과  해당 SQL을 실행 시키는데 수행된 시간 정보(millisecounds)를 포함한다 -->
    <logger name="jdbc.sqltiming level=DEBUG" />

    <!-- 5.  ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성된다.
          JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다.-->
    <logger name="jdbc.audit" level="OFF" />

    <!-- 6. ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기 므로 매우 방대한 양의 로그가 생성 된다.  -->
    <logger name ="jdbc.resultset" level="OFF" />

    <!-- 7. SQL 결과 조회된 데이터의 table을 로그로 남긴다.  -->
    <logger name ="jdbc.resultsettable" level="OFF" />

</configuration>